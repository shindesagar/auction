{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  // Check if token exists and is not expired\n  if (token) {\n    // Decode the token to get expiry time\n    const decodedToken = decodeToken(token);\n    const currentTime = Date.now() / 1000;\n    return decodedToken && decodedToken.exp > currentTime;\n  }\n  return false;\n};\nconst decodeToken = token => {\n  try {\n    // Decode the token\n    const decodedToken = jwtDecode(token);\n    return decodedToken;\n  } catch (error) {\n    // Token is invalid or expired\n    return null;\n  }\n};","map":{"version":3,"names":["jwtDecode","isAuthenticated","token","localStorage","getItem","decodedToken","decodeToken","currentTime","Date","now","exp","error"],"sources":["/Users/sagarshinde/Documents/sagar/HeroVired/frontend/react/advance-react/src/components/auth/auth.js"],"sourcesContent":["import jwtDecode from 'jwt-decode';\n\n\nexport const isAuthenticated = () => {\n    const token = localStorage.getItem('token');\n    // Check if token exists and is not expired\n    if (token) {\n      // Decode the token to get expiry time\n      const decodedToken = decodeToken(token);\n      const currentTime = Date.now() / 1000;\n      return decodedToken && decodedToken.exp > currentTime;\n    }\n    return false;\n  };\n  \n  const decodeToken = (token) => {\n    try {\n      // Decode the token\n      const decodedToken = jwtDecode(token);\n      return decodedToken;\n    } catch (error) {\n      // Token is invalid or expired\n      return null;\n    }\n  };\n  "],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAGlC,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACjC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C;EACA,IAAIF,KAAK,EAAE;IACT;IACA,MAAMG,YAAY,GAAGC,WAAW,CAACJ,KAAK,CAAC;IACvC,MAAMK,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,OAAOJ,YAAY,IAAIA,YAAY,CAACK,GAAG,GAAGH,WAAW;EACvD;EACA,OAAO,KAAK;AACd,CAAC;AAED,MAAMD,WAAW,GAAIJ,KAAK,IAAK;EAC7B,IAAI;IACF;IACA,MAAMG,YAAY,GAAGL,SAAS,CAACE,KAAK,CAAC;IACrC,OAAOG,YAAY;EACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd;IACA,OAAO,IAAI;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}